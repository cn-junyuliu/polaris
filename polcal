#!/usr/bin/env python

# Imports
import argparse
import logging
import datetime
import subprocess
import sys
import dill

# Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('-o', '--output-filename', dest='output_filename',
                    default='output.cal', help='Specify the output filename.')

parser.add_argument('-l', '--log-filename', dest='log_filename',
                    default='output.log', help='Specify the log filename.')

parser.add_argument('-n', dest='n', type=float,
                    default=1.33, help='Index of refraction')

parser.add_argument('--ill-thetas', nargs='+', dest='ill_thetas', type=float,
                    default=[0], help='Illumination axis directions in degress from z axis. +z-axis is 0. +x-axis is 90. Example: "--ill-theta 0 90"')

parser.add_argument('--det-thetas', nargs='+', dest='det_thetas', type=float,
                    default=[0], help='Detection axis directions in degress from z axis. +z-axis is 0. +x-axis is 90. Example: "--det-theta 0 90"')

parser.add_argument('--det-nas', nargs='+', dest='det_nas', type=float,
                    default=[0.8], help='Detection NAs. Example: "--det-nas 1.1 0.71"')

parser.add_argument('--phi-pols', nargs='+', dest='phi_pols', type=float,
                    default=[0, 45, 90, 135], help='Illumination polarization angles wrt +x for z-axis illumination (wrt -z for x-axis illumination). Example: "--phi-pols 0 45 90 135"')

parser.add_argument('--max-l', dest='max_l', type=int,
                    default=4, help='Bandlimit for integrals')

arg = parser.parse_args()

# Setup logging
log = logging.getLogger('cal')
log.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
log.addHandler(ch)
fh = logging.FileHandler(arg.log_filename, mode='w')
fh.setLevel(logging.DEBUG) 
log.addHandler(fh)

# Log basics
log.info('-----polcal-----')
log.info('Platform:\t'+sys.platform)
v = subprocess.Popen(['git', 'rev-parse', '--short', 'HEAD'],
                     cwd='/'.join(__file__.split('/')[:-1])+'/',
                     stdout=subprocess.PIPE).communicate()[0]
log.info('Version:\t'+v.strip().decode('ascii'))
log.info('Time:\t\t'+datetime.datetime.now().replace(microsecond=0).isoformat())
log.info('Command:\t'+' '.join(sys.argv))

# Main script
# Build microscope
from polaris import multi
exp = multi.MultiMicroscope(ill_thetas=arg.ill_thetas,
                            det_thetas=arg.det_thetas, det_nas=arg.det_nas,
                            phi_pols=arg.phi_pols, max_l=arg.max_l, n=arg.n)
                            
# Calculate and save (comment this on repeat runs)
exp.calc_sys_matrix()
dill.dump(exp, open(arg.output_filename,'wb'))

# Pass on calibration file.
log.info('stdout:\t\t'+arg.output_filename)
sys.stdout.write(arg.output_filename)
